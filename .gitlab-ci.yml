image: docker:stable


variables:
  IMAGE_SHA: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  DOCKER_TLS_CERTDIR: "/certs"


services:
  - docker:stable-dind


before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

    
stages:
  - build
  - deploy
  - smoke-test
  - scheduled


build-sha:
  stage: build
  script:
    - echo 'let appVersion = "'${CI_COMMIT_TAG:-$CI_COMMIT_SHA}'"' > ./Sources/App/Core/AppVersion.swift
    - docker build -t $IMAGE_SHA .
    - docker push $IMAGE_SHA
    

build-tag:
  stage: build
  only:
    - tags
  script:
    # re-tag image with tag name
    - docker pull $IMAGE_SHA
    - docker tag $IMAGE_SHA $IMAGE_TAG
    - docker push $IMAGE_TAG


.deploy-common: &deploy-common
  stage: deploy
  image: docker/compose:1.25.5
  tags:
    - mini-spi
  script: |
    VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHA}
    if [ -z "$VERSION" ]; then echo VERSION not set; exit 1 ; fi
    # install curl and set up alias to post deployment to rollbar
    apk add --no-cache curl
    rollbar() {
      curl -H "X-Rollbar-Access-Token: $ROLLBAR_TOKEN" -X POST --data '{"environment": "'"$ENV"'", "local_username": "CI", "revision": "'"$VERSION"'", "status": "'"$1"'"}' https://api.rollbar.com/api/1/deploy
    }
    # migrate
    echo Migrating database ...
    docker-compose up -d db
    echo Deploying with SITE_URL: ${SITE_URL} ...
    env VERSION=$VERSION docker-compose run migrate
    # deploy
    env VERSION=$VERSION docker-compose up -d
    if [[ $? == 0 ]]; then
      rollbar succeeded
    else
      rollbar failed
    fi
  
  
deploy:
  <<: *deploy-common
  only:
    - tags
  
  
deploy (ad hoc): &deploy
  <<: *deploy-common
  when: manual


smoke-test:
  stage: smoke-test
  only:
    - tags
    - schedules
  script: |
    rester() {
      docker run --rm -t -e base_url="$SITE_URL" -v $PWD:/host -w /host finestructure/rester:0.7.2 "$1"
    }
    echo Testing with SITE_URL: ${SITE_URL}
    rester restfiles/smoke-test.restfile
    rester restfiles/active-packages-test.restfile


db-backup:
  stage: scheduled
  only:
    - schedules
  when: manual
  tags:
    - ceres
  script: |
    FILENAME=spi_prod_$(date +%Y-%m-%d).dump
    echo Backing database up to file ${FILENAME}
    echo Note: This requires the appropriate SSH tunnel to be active on the runner
    env PGPASSWORD=${DATABASE_PASSWORD} pg_dump --no-owner -Fc -h localhost -p 7432 -U spi_prod spi_prod > ${FILENAME}
