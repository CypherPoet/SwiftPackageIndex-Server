{
  "abstract" : [
    {
      "code" : "SemanticVersion",
      "type" : "codeVoice"
    },
    {
      "text" : " is a struct representing a software or project version according to “Semantic Versioning”.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/SemanticVersion\/documentation\/SemanticVersion"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "SemanticVersion",
    "modules" : [
      {
        "name" : "SemanticVersion"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "SemanticVersion"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Given a version number MAJOR.MINOR.PATCH, increment the:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "MAJOR version when you make incompatible API changes,",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "MINOR version when you add functionality in a backwards compatible manner, and",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "PATCH version when you make backwards compatible bug fixes.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Find out more about ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/semver.org",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once instantiated, you can query a ",
              "type" : "text"
            },
            {
              "code" : "SemanticVersion",
              "type" : "codeVoice"
            },
            {
              "text" : " about its components:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let v123 = SemanticVersion(1, 2, 3)",
            "v123.isStable        \/\/ true",
            "v123.isPreRelease    \/\/ false",
            "v123.isMajorRelease  \/\/ false",
            "v123.isMinorRelease  \/\/ false",
            "v123.isPatchRelease  \/\/ true"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also instantiate a ",
              "type" : "text"
            },
            {
              "code" : "SemanticVersion",
              "type" : "codeVoice"
            },
            {
              "text" : " from a string",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let v200 = SemanticVersion(\"2.0.0\")!",
            "v200.isStable        \/\/ true",
            "v200.isPreRelease    \/\/ false",
            "v200.isMajorRelease  \/\/ true",
            "v200.isMinorRelease  \/\/ false",
            "v200.isPatchRelease  \/\/ false"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "SemanticVersion",
              "type" : "codeVoice"
            },
            {
              "text" : " supports beta versions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let v300rc1 = SemanticVersion(\"3.0.0-rc1-test\")!",
            "v300rc1.isStable        \/\/ false",
            "v300rc1.isPreRelease    \/\/ true",
            "v300rc1.isMajorRelease  \/\/ false",
            "v300rc1.isMinorRelease  \/\/ false",
            "v300rc1.isPatchRelease  \/\/ false",
            "v300rc1.major           \/\/ 3",
            "v300rc1.minor           \/\/ 0",
            "v300rc1.patch           \/\/ 0",
            "v300rc1.preRelease      \/\/ \"rc1-test\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "SemanticVersion",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Equatable",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "v123 < v200          \/\/ true",
            "SemanticVersion(\"2.0.0\")! < SemanticVersion(\"2.0.1\")!  \/\/ true",
            "\/\/ NB: beta versions come before their releases",
            "SemanticVersion(\"2.0.0\")! > SemanticVersion(\"2.0.0-b1\")!  \/\/ true",
            "v123 == SemanticVersion(\"1.2.3\")  \/\/ true",
            "SemanticVersion(\"v1.2.3-beta1+build5\")",
            "    == SemanticVersion(1, 2, 3, \"beta1\", \"build5\")  \/\/ true"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "SemanticVersion",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "Hashable",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let dict = [         \/\/ [{major 3, minor 0, patch 0,...",
            "    v123: 1,",
            "    v200: 2,",
            "    v300rc1: 3",
            "]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "SemanticVersion",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let data = try JSONEncoder().encode(v123)  \/\/ 58 bytes",
            "let decoded = try JSONDecoder().decode(SemanticVersion.self, from: data)  \/\/ 1.2.3",
            "decoded == v123  \/\/ true"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/SemanticVersion\/documentation\/SemanticVersion\/SemanticVersion"
      ],
      "title" : "Structures"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/semanticversion"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://SemanticVersion/documentation/SemanticVersion": {
  "abstract" : [
    {
      "code" : "SemanticVersion",
      "type" : "codeVoice"
    },
    {
      "text" : " is a struct representing a software or project version according to “Semantic Versioning”.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SemanticVersion\/documentation\/SemanticVersion",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "SemanticVersion",
  "type" : "topic",
  "url" : "\/documentation\/semanticversion"
},
"doc://SemanticVersion/documentation/SemanticVersion/SemanticVersion": {
  "abstract" : [
    {
      "code" : "SemanticVersion",
      "type" : "codeVoice"
    },
    {
      "text" : " is a struct representing a software or project version according to ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/semver.org",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SemanticVersion"
    }
  ],
  "identifier" : "doc:\/\/SemanticVersion\/documentation\/SemanticVersion\/SemanticVersion",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SemanticVersion"
    }
  ],
  "role" : "symbol",
  "title" : "SemanticVersion",
  "type" : "topic",
  "url" : "\/documentation\/semanticversion\/semanticversion"
},
"https://semver.org": {
  "identifier" : "https:\/\/semver.org",
  "title" : "“Semantic Versioning”",
  "titleInlineContent" : [
    {
      "text" : "“Semantic Versioning”",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/semver.org"
}
}
}