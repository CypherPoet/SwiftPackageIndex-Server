#   Build images: docker-compose build
#      Start app: docker-compose up app

version: '3.7'


x-shared: &shared
  environment:
    # set these variables via the environment or a `.env` file, which
    # docker-compose reads and uses to populate variables
    ALLOW_BUILD_TRIGGERS: ${ALLOW_BUILD_TRIGGERS}
    ALLOW_TWITTER_POSTS: ${ALLOW_TWITTER_POSTS}
    BUILD_TRIGGER_DOWNSCALING: ${BUILD_TRIGGER_DOWNSCALING}
    BUILD_TRIGGER_LIMIT: ${BUILD_TRIGGER_LIMIT}
    BUILD_TRIGGER_SLEEP: ${BUILD_TRIGGER_SLEEP}
    BUILDER_TOKEN: ${BUILDER_TOKEN}
    CHECKOUTS_DIR: ${CHECKOUTS_DIR}
    DATABASE_HOST: ${DATABASE_HOST}
    DATABASE_PORT: ${DATABASE_PORT}
    DATABASE_NAME: ${DATABASE_NAME}
    DATABASE_USERNAME: ${DATABASE_USERNAME}
    DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    GITHUB_TOKEN: ${GITHUB_TOKEN}
    GITLAB_API_TOKEN: ${GITLAB_API_TOKEN}
    GITLAB_PIPELINE_LIMIT: ${GITLAB_PIPELINE_LIMIT}
    GITLAB_PIPELINE_TOKEN: ${GITLAB_PIPELINE_TOKEN}
    HIDE_STAGING_BANNER: ${HIDE_STAGING_BANNER}
    LOG_LEVEL: ${LOG_LEVEL}
    METRICS_PUSHGATEWAY_URL: ${METRICS_PUSHGATEWAY_URL}
    ROLLBAR_TOKEN: ${ROLLBAR_TOKEN}
    SITE_URL: ${SITE_URL}
    TWITTER_API_KEY: ${TWITTER_API_KEY}
    TWITTER_API_SECRET: ${TWITTER_API_SECRET}
    TWITTER_ACCESS_TOKEN_KEY: ${TWITTER_ACCESS_TOKEN_KEY}
    TWITTER_ACCESS_TOKEN_SECRET: ${TWITTER_ACCESS_TOKEN_SECRET}
  volumes:
    - checkouts:/checkouts


services:
  
  # Main services
  
  app:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    ports:
      - '80:80'
    command: ["serve", "--env", "${ENV}", "--hostname", "0.0.0.0", "--port", "80"]
    restart: always

  reconcile:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run reconcile --env ${ENV}; sleep ${RECONCILE_SLEEP:-120}; done"
    ]
    restart: always

  ingest:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run ingest --env ${ENV} --limit ${INGEST_LIMIT:-100}; sleep ${INGEST_SLEEP:-300}; done"
    ]
    restart: always

  analyze:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run analyze --env ${ENV} --limit ${ANALYZE_LIMIT:-25}; sleep ${ANALYZE_SLEEP:-20}; done"
    ]
    restart: always

  trigger_builds:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run trigger-builds --env ${ENV} --limit ${BUILD_TRIGGER_LIMIT:-1}; sleep ${BUILD_TRIGGER_SLEEP:-60}; done"
    ]
    restart: always
  
  # Main app database & migration
  
  migrate:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - db
    command: ["migrate", "--yes"]

  db:
    image: postgres:12.1-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    restart: always

  # Maintenance access container
  
  sshd:
    image: registry.gitlab.com/finestructure/spi-sshd:0.0.1
    entrypoint: ["/bin/bash"]
    command: ["-c", "--", "echo '${authorized_keys}' > /root/.ssh/authorized_keys && chmod 0400 /root/.ssh/authorized_keys && ssh-start ssh-server"]
    ports:
      - "2222:22"
    restart: always

  # Logging & monitoring visualiser

  grafana:
    build:
      context: ./infrastructure/grafana
      args:
        GRAFANA_VERSION: '7.3.1'
        GF_INSTALL_IMAGE_RENDERER_PLUGIN: 'true'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SERVER_ROOT_URL: "${GF_SERVER_ROOT_URL}"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    ports:
      - 3000:3000

  # Logging

  loki:
    build: ./infrastructure/loki
    command: -config.file=/loki.yaml
    restart: always

  promtail:
    build: ./infrastructure/promtail
    volumes:
      - /var/lib/docker/containers:/var/log
    command: -config.file=/promtail.yaml
    restart: always

  # Monitoring

  prometheus:
    build: ./infrastructure/prometheus
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/prometheus.yml'
    restart: always

  pushgateway:
    image: prom/pushgateway:v1.3.0
    restart: always

  # Analytics

  mail:
    image: bytemark/smtp
    restart: always
  
  plausible_db:
    image: postgres:12.1-alpine
    volumes:
      - plausible_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
    # restart: always
  
  plausible_events_db:
    build: ./infrastructure/clickhouse-server
    volumes:
      - plausible_event_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    # restart: always

  plausible:
    image: plausible/analytics:v.1.2
    command: sh -c "sleep 10 && /entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh db init-admin && /entrypoint.sh run"
    depends_on:
      - plausible_db
      - plausible_events_db
      - mail
    ports:
      - 8000:8000
    environment:
      ADMIN_USER_EMAIL: ${PLAUSIBLE_ADMIN_USER_EMAIL}
      ADMIN_USER_NAME: ${PLAUSIBLE_ADMIN_USER_NAME}
      ADMIN_USER_PWD: ${PLAUSIBLE_ADMIN_USER_PWD}
      BASE_URL: ${PLAUSIBLE_BASE_URL}
      SECRET_KEY_BASE: ${PLAUSIBLE_SECRET_KEY_BASE}
    # restart: always


volumes:
  db_data:
  checkouts:
  grafana_data:
  plausible_db_data:
  plausible_event_data:
  prometheus_data:
