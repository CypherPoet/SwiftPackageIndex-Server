#   Build images: docker-compose build
#      Start app: docker-compose up app

version: '3.7'

x-shared: &shared
  environment:
    # set these variables via the environment or a `.env` file, which
    # docker-compose reads and uses to populate variables
    CHECKOUTS_DIR: ${CHECKOUTS_DIR}
    DATABASE_HOST: ${DATABASE_HOST}
    DATABASE_PORT: ${DATABASE_PORT}
    DATABASE_NAME: ${DATABASE_NAME}
    DATABASE_USERNAME: ${DATABASE_USERNAME}
    DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    GITHUB_TOKEN: ${GITHUB_TOKEN}
    ROLLBAR_TOKEN: ${ROLLBAR_TOKEN}
    LOG_LEVEL: ${LOG_LEVEL}
  volumes:
    - checkouts:/checkouts

services:
  app:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    ports:
      - '8080:80'
    command: ["serve", "--env", "${ENV}", "--hostname", "0.0.0.0", "--port", "80"]
    deploy:
      update_config:
        order: start-first

  reconcile:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run reconcile --env ${ENV}; sleep ${RECONCILE_SLEEP:-120}; done"
    ]

  ingest:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run ingest --env ${ENV} --limit ${INGEST_LIMIT:-100}; sleep ${INGEST_SLEEP:-10}; done"
    ]

  analyze:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run analyze --env ${ENV} --limit ${ANALYZE_LIMIT:-50}; sleep ${ANALYZE_SLEEP:-10}; done"
    ]

  migrate:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0

  db:
    image: postgres:12.1-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}

  sshd:
    image: registry.gitlab.com/finestructure/spi-sshd:0.0.1
    entrypoint: ["/bin/bash"]
    command: ["-c", "--", "echo '${authorized_keys}' > /root/.ssh/authorized_keys && chmod 0400 /root/.ssh/authorized_keys && ssh-start ssh-server"]
    ports:
      - "2222:22"

  grafana:
    image: grafana/grafana:7.0.0
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana

  loki:
    image: grafana/loki:1.5.0
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:1.5.0
    volumes:
      - /var/lib/docker/containers:/var/log
      - ./promtail-config.yaml:/etc/promtail/promtail.yaml
    command: -config.file=/etc/promtail/promtail.yaml

volumes:
  db_data:
  checkouts:
  grafana_data:
